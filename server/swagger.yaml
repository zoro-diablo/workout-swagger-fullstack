openapi: 3.0.0
info:
  title: My Workout App API
  description: A simple API for managing workouts and user authentication, including admin operations, documented with Swagger.
  version: 1.0.0

servers:
  - url: http://localhost:4000

tags:
  - name: Workout
    description: Operations related to workout management
  - name: Auth
    description: User authentication (signup and login)
  - name: Admin
    description: Admin-only operations for user management

paths:
  /api/workouts:
    get:
      tags:
        - Workout
      summary: Get all workouts
      description: Retrieves all workouts for admins or the authenticated user's workouts for regular users.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of workouts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workout'
        '401':
          description: Unauthorized - No token provided or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Workout
      summary: Create a new workout
      description: Creates a new workout for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutInput'
      responses:
        '200':
          description: Workout created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
        '400':
          description: Bad request - Missing or invalid fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - No token provided or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workouts/{id}:
    get:
      tags:
        - Workout
      summary: Get a single workout by ID
      description: Retrieves a specific workout by ID. Regular users can only access their own workouts; admins can access any workout.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: MongoDB ObjectId of the workout
      responses:
        '200':
          description: Workout found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
        '401':
          description: Unauthorized - No token provided or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workout not found or unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Workout
      summary: Delete a workout by ID
      description: Deletes a specific workout by ID. Regular users can only delete their own workouts; admins can delete any workout.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: MongoDB ObjectId of the workout
      responses:
        '200':
          description: Workout deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
        '401':
          description: Unauthorized - No token provided or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workout not found or unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - Workout
      summary: Update a workout by ID
      description: Updates a specific workout by ID. Regular users can only update their own workouts; admins can update any workout.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: MongoDB ObjectId of the workout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutInput'
      responses:
        '200':
          description: Workout updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
        '400':
          description: Bad request - Invalid fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - No token provided or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workout not found or unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/user/signup:
    post:
      tags:
        - Auth
      summary: Sign up a new user
      description: Registers a new user with the default role of 'user'.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User signed up successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input or email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/user/login:
    post:
      tags:
        - Auth
      summary: Login an existing user
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/user/signup-admin:
    post:
      tags:
        - Auth
        - Admin
      summary: Sign up a new admin user
      description: Registers a new user with the 'admin' role. Requires admin authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: Admin user signed up successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input or email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - No token provided or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      description: Retrieves a list of all users. Admin-only endpoint.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - No token provided or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Admin
      summary: Delete a user by ID
      description: Deletes a specific user by ID. Admin-only endpoint.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: MongoDB ObjectId of the user
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted
        '401':
          description: Unauthorized - No token provided or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Workout:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId of the workout
        title:
          type: string
          description: Title of the workout
        reps:
          type: integer
          description: Number of repetitions
        load:
          type: integer
          description: Weight load in kilograms
        user_id:
          type: string
          description: MongoDB ObjectId of the user who created the workout
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the workout was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the workout was last updated

    WorkoutInput:
      type: object
      required:
        - title
        - reps
        - load
      properties:
        title:
          type: string
          description: Title of the workout
        reps:
          type: integer
          description: Number of repetitions
        load:
          type: integer
          description: Weight load in kilograms

    User:
      type: object
      properties:
        email:
          type: string
          description: User's email address
        role:
          type: string
          enum: [user, admin]
          description: User's role (user or admin)

    UserInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User's email address
        password:
          type: string
          format: password
          description: User's password (must meet strength requirements)

    AuthResponse:
      type: object
      properties:
        email:
          type: string
          description: User's email address
        role:
          type: string
          enum: [user, admin]
          description: User's role
        token:
          type: string
          description: JWT token for authentication

    Error:
      type: object
      properties:
        err:
          type: string
          description: Error message